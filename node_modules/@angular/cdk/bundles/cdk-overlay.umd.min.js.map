{"version":3,"file":"cdk-overlay.umd.min.js","sources":["../../src/cdk/overlay/overlay.ts","../../src/cdk/overlay/overlay-directives.ts","../../src/cdk/overlay/overlay-module.ts","../../src/cdk/overlay/fullscreen-overlay-container.ts","../../node_modules/tslib/tslib.es6.js","../../src/cdk/overlay/position/connected-position.ts","../../src/cdk/overlay/scroll/scroll-strategy.ts","../../src/cdk/overlay/position/scroll-clip.ts","../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts","../../src/cdk/overlay/overlay-container.ts","../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../src/cdk/overlay/overlay-config.ts","../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../src/cdk/overlay/overlay-ref.ts","../../src/cdk/overlay/position/connected-position-strategy.ts","../../src/cdk/overlay/position/global-position-strategy.ts","../../src/cdk/overlay/position/overlay-position-builder.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n} from '@angular/core';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable()\nexport class Overlay {\n  private _appRef: ApplicationRef;\n\n  constructor(\n              /** Scrolling strategies that can be used when creating an overlay. */\n              public scrollStrategies: ScrollStrategyOptions,\n              private _overlayContainer: OverlayContainer,\n              private _componentFactoryResolver: ComponentFactoryResolver,\n              private _positionBuilder: OverlayPositionBuilder,\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\n              private _injector: Injector,\n              private _ngZone: NgZone,\n              @Inject(DOCUMENT) private _document: any,\n              private _directionality: Directionality) { }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\n      this._keyboardDispatcher, this._document);\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n} from './position/flexible-connected-position-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n  ScrollStrategy,\n} from './scroll/index';\n\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: ConnectedPosition[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top'\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top'\n  }\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('cdk-connected-overlay-scroll-strategy');\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return (config?: RepositionScrollStrategyConfig) => overlay.scrollStrategies.reposition(config);\n}\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n})\nexport class CdkOverlayOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef) { }\n}\n\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n  private _overlayRef: OverlayRef;\n  private _templatePortal: TemplatePortal;\n  private _hasBackdrop = false;\n  private _lockPosition = false;\n  private _growAfterOpen = false;\n  private _flexibleDimensions = false;\n  private _push = false;\n  private _backdropSubscription = Subscription.EMPTY;\n  private _offsetX: number;\n  private _offsetY: number;\n  private _position: FlexibleConnectedPositionStrategy;\n\n  /** Origin for the connected overlay. */\n  @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\n\n  /** Registered connected position pairs. */\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\n\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  @Input('cdkConnectedOverlayOffsetX')\n  get offsetX(): number { return this._offsetX; }\n  set offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._setPositions(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  @Input('cdkConnectedOverlayOffsetY')\n  get offsetY() { return this._offsetY; }\n  set offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._setPositions(this._position);\n    }\n  }\n\n  /** The width of the overlay panel. */\n  @Input('cdkConnectedOverlayWidth') width: number | string;\n\n  /** The height of the overlay panel. */\n  @Input('cdkConnectedOverlayHeight') height: number | string;\n\n  /** The min width of the overlay panel. */\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\n\n  /** Margin between the overlay and the viewport edges. */\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy =\n      this._scrollStrategy();\n\n  /** Whether the overlay is open. */\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n  /** Whether or not the overlay should attach a backdrop. */\n  @Input('cdkConnectedOverlayHasBackdrop')\n  get hasBackdrop() { return this._hasBackdrop; }\n  set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  @Input('cdkConnectedOverlayLockPosition')\n  get lockPosition() { return this._lockPosition; }\n  set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  @Input('cdkConnectedOverlayFlexibleDimensions')\n  get flexibleDiemsions() { return this._flexibleDimensions; }\n  set flexibleDiemsions(value: boolean) { this._flexibleDimensions = coerceBooleanProperty(value); }\n\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n  @Input('cdkConnectedOverlayGrowAfterOpen')\n  get growAfterOpen() { return this._growAfterOpen; }\n  set growAfterOpen(value: boolean) { this._growAfterOpen = coerceBooleanProperty(value); }\n\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  @Input('cdkConnectedOverlayPush')\n  get push() { return this._push; }\n  set push(value: boolean) { this._push = coerceBooleanProperty(value); }\n\n  /** Event emitted when the backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<MouseEvent>();\n\n  /** Event emitted when the position has changed. */\n  @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n  @Output() attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n  @Output() detach = new EventEmitter<void>();\n\n  /** Emits when there are keyboard events that are targeted at the overlay. */\n  @Output() overlayKeydown = new EventEmitter<KeyboardEvent>();\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  constructor(\n      private _overlay: Overlay,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\n      @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() private _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n\n  /** The element's layout direction. */\n  get dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    this._destroyOverlay();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._position) {\n      if (changes['positions']) {\n        this._position.withPositions(this.positions);\n      }\n\n      if (changes['lockPosition']) {\n        this._position.withLockedPosition(this.lockPosition);\n      }\n\n      if (changes['origin']) {\n        this._position.setOrigin(this.origin.elementRef);\n\n        if (this.open) {\n          this._position.apply();\n        }\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  private _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  private _buildConfig(): OverlayConfig {\n    const positionStrategy = this._position = this._createPositionStrategy();\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    return overlayConfig;\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this.origin.elementRef)\n      .withFlexibleDimensions(this.flexibleDiemsions)\n      .withPush(this.push)\n      .withGrowAfterOpen(this.growAfterOpen)\n      .withViewportMargin(this.viewportMargin)\n      .withLockedPosition(this.lockPosition);\n\n    this._setPositions(strategy);\n    strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n\n    return strategy;\n  }\n\n  /**\n   * Sets the primary and fallback positions of a positions strategy,\n   * based on the current directive inputs.\n   */\n  private _setPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const positions: ConnectedPosition[] = this.positions.map(pos => ({\n      originX: pos.originX,\n      originY: pos.originY,\n      overlayX: pos.overlayX,\n      overlayY: pos.overlayY,\n      offsetX: pos.offsetX || this.offsetX,\n      offsetY: pos.offsetY || this.offsetY\n    }));\n\n    positionStrategy.withPositions(positions);\n  }\n\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n  private _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n\n      this._overlayRef!.keydownEvents().subscribe((event: KeyboardEvent) => {\n        this.overlayKeydown.next(event);\n\n        if (event.keyCode === ESCAPE) {\n          this._detachOverlay();\n        }\n      });\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    }\n  }\n\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n  private _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n\n  /** Destroys the overlay created by this directive. */\n  private _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n}\n\n\n/** @docs-private */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {NgModule, Provider} from '@angular/core';\nimport {OVERLAY_KEYBOARD_DISPATCHER_PROVIDER} from './keyboard/overlay-keyboard-dispatcher';\nimport {Overlay} from './overlay';\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n} from './overlay-directives';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\n\n\n@NgModule({\n  imports: [BidiModule, PortalModule, ScrollDispatchModule],\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollDispatchModule],\n  declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n  providers: [\n    Overlay,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  ],\n})\nexport class OverlayModule {}\n\n\n/**\n * @deprecated Use `OverlayModule` instead.\n * @deletion-target 7.0.0\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable()\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n  private _fullScreenEventName: string | undefined;\n  private _fullScreenListener: () => void;\n\n  constructor(@Inject(DOCUMENT) _document: any) {\n    super(_document);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  protected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n\n  private _getEventName(): string | undefined {\n    if (!this._fullScreenEventName) {\n      if (this._document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (this._document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if ((this._document as any).mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if ((this._document as any).msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement(): Element {\n    return this._document.fullscreenElement ||\n           this._document.webkitFullscreenElement ||\n           (this._document as any).mozFullScreenElement ||\n           (this._document as any).msFullscreenElement ||\n           null;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    public offsetX?: number,\n    public offsetY?: number) {\n\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n      /** The position used as a result of this change. */\n      public connectionPair: ConnectionPositionPair,\n      /** @docs-private */\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayReference} from '../overlay-reference';\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n  enable: () => void;\n\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n  disable: () => void;\n\n  /** Attaches this `ScrollStrategy` to an overlay. */\n  attach: (overlayRef: OverlayReference) => void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {OverlayRef} from '../overlay-ref';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher implements OnDestroy {\n\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayRef[] = [];\n\n  private _document: Document;\n  private _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayRef): void {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener, true);\n      this._isAttached = true;\n    }\n\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayRef): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this._detach();\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  private _detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener, true);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    const overlays = this._attachedOverlays;\n\n    for (let i = overlays.length - 1; i > -1; i--) {\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n      // We want to target the most recent overlay, rather than trying to match where the event came\n      // from, because some components might open an overlay, but keep focus on a trigger element\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n      // because we don't want overlays that don't handle keyboard events to block the ones below\n      // them that do.\n      if (overlays[i]._keydownEventSubscriptions > 0) {\n        overlays[i]._keydownEvents.next(event);\n        break;\n      }\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n\n    // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n    // of the type expected by Angular\n    DOCUMENT as InjectionToken<any>\n  ],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\n\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n\n  constructor(@Inject(DOCUMENT) protected _document: any) {}\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const container = this._document.createElement('div');\n\n    container.classList.add('cdk-overlay-container');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer,\n  _document: any) {\n  return parentContainer || new OverlayContainer(_document);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayContainer],\n    DOCUMENT as InjectionToken<any> // We need to use the InjectionToken somewhere to keep TS happy\n  ],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler, CdkScrollable} from '@angular/cdk/scrolling';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  ScrollingVisibility,\n  validateHorizontalPosition,\n  validateVerticalPosition,\n} from './connected-position';\nimport {Observable, Subscription, Subject} from 'rxjs';\nimport {OverlayReference} from '../overlay-reference';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  /** Whether we're performing the very first positioning of the overlay. */\n  private _isInitialRender = true;\n\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n  private _lastBoundingBoxSize = {width: 0, height: 0};\n\n  /** Whether the overlay was pushed in a previous positioning. */\n  private _isPushed = false;\n\n  /** Whether the overlay can be pushed on-screen on the initial open. */\n  private _canPush = true;\n\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\n  private _growAfterOpen = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  private _hasFlexibleDimensions = true;\n\n  /** Whether the overlay position is locked. */\n  private _positionLocked = false;\n\n  /** Cached origin dimensions */\n  private _originRect: ClientRect;\n\n  /** Cached overlay dimensions */\n  private _overlayRect: ClientRect;\n\n  /** Cached viewport dimensions */\n  private _viewportRect: ClientRect;\n\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n  private _viewportMargin = 0;\n\n  /** The Scrollable containers used to check scrollable view properties on position change. */\n  private scrollables: CdkScrollable[] = [];\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** The origin element against which the overlay will be positioned. */\n  private _origin: HTMLElement;\n\n  /** The overlay pane element. */\n  private _pane: HTMLElement;\n\n  /** Whether the strategy has been disposed of already. */\n  private _isDisposed: boolean;\n\n  /**\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n   * within the viewport.\n   */\n  private _boundingBox: HTMLElement | null;\n\n  /** The last position to have been calculated as the best fit position. */\n  private _lastPosition: ConnectedPosition | null;\n\n  /** Subject that emits whenever the position changes. */\n  private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n  /** Subscription to viewport size changes. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /** Default offset for the overlay along the x axis. */\n  private _offsetX = 0;\n\n  /** Default offset for the overlay along the y axis. */\n  private _offsetY = 0;\n\n  /** Selector to be used when finding the elements on which to set the transform origin. */\n  private _transformOriginSelector: string;\n\n  /** Amount of subscribers to the `positionChanges` stream. */\n  private _positionChangeSubscriptions = 0;\n\n  /** Observable sequence of position changes. */\n  positionChanges: Observable<ConnectedOverlayPositionChange> = Observable.create(observer => {\n    const subscription = this._positionChanges.subscribe(observer);\n    this._positionChangeSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._positionChangeSubscriptions--;\n    };\n  });\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions() {\n    return this._preferredPositions;\n  }\n\n  constructor(\n    connectedTo: ElementRef | HTMLElement,\n    private _viewportRuler: ViewportRuler,\n    private _document: Document,\n    // @deletion-target 7.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    private _platform?: Platform,\n    private _overlayContainer?: OverlayContainer) {\n    this.setOrigin(connectedTo);\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    if (this._overlayRef && overlayRef !== this._overlayRef) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add('cdk-overlay-connected-position-bounding-box');\n\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => this.apply());\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply(): void {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    // @deletion-target 7.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n    if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n      return;\n    }\n\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._origin.getBoundingClientRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits: FlexibleFit[] = [];\n\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback: FallbackPosition | undefined;\n\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, pos);\n\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n\n        continue;\n      }\n\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit: FlexibleFit | null = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score =\n            fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n      this._applyPosition(bestFit!.position, bestFit!.origin);\n      return;\n    }\n\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback!.position, fallback!.originPoint);\n      return;\n    }\n\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback!.position, fallback!.originPoint);\n  }\n\n  detach() {\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose() {\n    if (!this._isDisposed) {\n      this.detach();\n      this._boundingBox = null;\n      this._positionChanges.complete();\n      this._isDisposed = true;\n    }\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition(): void {\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n      this._originRect = this._origin.getBoundingClientRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this.scrollables = scrollables;\n  }\n\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions: ConnectedPosition[]): this {\n    this._preferredPositions = positions;\n\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition!) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin: number): this {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true): this {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true): this {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true): this {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true): this {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef | HTMLElement): this {\n    this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n  withTransformOriginOn(selector: string): this {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  private _getOriginPoint(originRect: ClientRect, pos: ConnectedPosition): Point {\n    let x: number;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + (originRect.width / 2);\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    let y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  private _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      pos: ConnectedPosition): Point {\n\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  private _getOverlayFit(point: Point, overlay: ClientRect, viewport: ClientRect,\n    position: ConnectedPosition): OverlayFit {\n\n    let {x, y} = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    }\n\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = (x + overlay.width) - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = (y + overlay.height) - viewport.height;\n\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlat at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: ClientRect) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = this._overlayRef.getConfig().minHeight;\n      const minWidth = this._overlayRef.getConfig().minWidth;\n\n      const verticalFit = fit.fitsInViewportVertically ||\n          (minHeight != null && minHeight <= availableHeight);\n      const horizontalFit = fit.fitsInViewportHorizontally ||\n          (minWidth != null && minWidth <= availableWidth);\n\n      return verticalFit && horizontalFit;\n    }\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @param start The starting point from which the overlay is pushed.\n   * @param overlay The overlay dimensions.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  private _pushOverlayOnScreen(start: Point, overlay: ClientRect): Point {\n    const viewport = this._viewportRect;\n\n    // Determine how much the overlay goes outside the viewport on each side, which we'll use to\n    // decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n    const overflowTop = Math.max(viewport.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - start.x, 0);\n\n    // Amount by which to push the overlay in each direction such that it remains on-screen.\n    let pushX, pushY = 0;\n\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = viewport.left - start.x;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = viewport.top - start.y;\n    }\n\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculcations can be somewhat expensive.\n    if (this._positionChangeSubscriptions > 0) {\n      const scrollableViewProperties = this._getScrollVisibility();\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n  private _setTransformOrigin(position: ConnectedPosition) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements: NodeListOf<HTMLElement> =\n        this._boundingBox!.querySelectorAll(this._transformOriginSelector);\n    let xOrigin: 'left' | 'right' | 'center';\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height, top, bottom;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.bottom - origin.y;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay\n      // is vertically centered on the origin point.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.bottom - origin.y, origin.y - viewport.left);\n      const previousHeight = this._lastBoundingBoxSize.height;\n\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - (previousHeight / 2);\n      }\n    }\n\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge =\n        (position.overlayX === 'start' && !isRtl) ||\n        (position.overlayX === 'end' && isRtl);\n\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge =\n        (position.overlayX === 'end' && !isRtl) ||\n        (position.overlayX === 'start' && isRtl);\n\n    let width, left, right;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.right - origin.x + this._viewportMargin;\n      width = origin.x - viewport.left;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay\n      // is horizontally centered on the origin point.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.right - origin.x, origin.x - viewport.top);\n      const previousWidth = this._lastBoundingBoxSize.width;\n\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - (previousWidth / 2);\n      }\n    }\n\n    return {top, left, bottom, right, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n\n    extendStyles(this._boundingBox!.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  private _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox!.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  private _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      extendStyles(styles, this._getExactOverlayY(position, originPoint));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint));\n    } else {\n      styles.position = 'static';\n    }\n\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim();\n\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n      styles.maxHeight = '';\n    }\n\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n      styles.maxWidth = '';\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayY(position: ConnectedPosition, originPoint: Point) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: null, bottom: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n    }\n\n    // @deletion-target 7.0.0 Currently the `_overlayContainer` is optional in order to avoid a\n    // breaking change. The null check here can be removed once the `_overlayContainer` becomes\n    // a required parameter.\n    let virtualKeyboardOffset = this._overlayContainer ?\n        this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0;\n\n    // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    overlayPoint.y -= virtualKeyboardOffset;\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayX(position: ConnectedPosition, originPoint: Point) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: null, right: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n    }\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty: 'left' | 'right';\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  private _getScrollVisibility(): ScrollingVisibility {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._origin.getBoundingClientRect();\n    const overlayBounds =  this._pane.getBoundingClientRect();\n\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this.scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from it's length. */\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  private _getNarrowedViewportRect(): ClientRect {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement.clientWidth;\n    const height = this._document.documentElement.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top:    scrollPosition.top + this._viewportMargin,\n      left:   scrollPosition.left + this._viewportMargin,\n      right:  scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width:  width  - (2 * this._viewportMargin),\n      height: height - (2 * this._viewportMargin),\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  private _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  private _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n\n  /** Validates that the current position match the expected values. */\n  private _validatePositions(): void {\n    if (!this._preferredPositions.length) {\n      throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n    }\n\n    // TODO(crisbeto): remove these once Angular's template type\n    // checking is advanced enough to catch these cases.\n    this._preferredPositions.forEach(pair => {\n      validateHorizontalPosition('originX', pair.originX);\n      validateVerticalPosition('originY', pair.originY);\n      validateHorizontalPosition('overlayX', pair.overlayX);\n      validateVerticalPosition('overlayY', pair.overlayY);\n    });\n  }\n}\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface OverlayFit {\n  /** Whether the overlay fits completely in the viewport. */\n  isCompletelyWithinViewport: boolean;\n\n  /** Whether the overlay fits in the viewport on the y-axis. */\n  fitsInViewportVertically: boolean;\n\n  /** Whether the overlay fits in the viewport on the x-axis. */\n  fitsInViewportHorizontally: boolean;\n\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\n  visibleArea: number;\n}\n\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\ninterface FallbackPosition {\n  position: ConnectedPosition;\n  originPoint: Point;\n  overlayPoint: Point;\n  overlayFit: OverlayFit;\n  overlayRect: ClientRect;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface BoundingBoxRect {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface FlexibleFit {\n  position: ConnectedPosition;\n  origin: Point;\n  overlayRect: ClientRect;\n  boundingBoxRect: BoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface ConnectedPosition {\n  originX: 'start' | 'center' | 'end';\n  originY: 'top' | 'center' | 'bottom';\n\n  overlayX: 'start' | 'center' | 'end';\n  overlayY: 'top' | 'center' | 'bottom';\n\n  weight?: number;\n  offsetX?: number;\n  offsetY?: number;\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(dest: CSSStyleDeclaration, source: CSSStyleDeclaration): CSSStyleDeclaration {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key];\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements ScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {NoopScrollStrategy} from './scroll/noop-scroll-strategy';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /**\n   * Direction of the text in the overlay panel. If a `Directionality` instance\n   * is passed in, the overlay will handle changes to its value automatically.\n   */\n  direction?: Direction | Directionality;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      Object.keys(config)\n        .filter(key => typeof config[key] !== 'undefined')\n        .forEach(key => this[key] = config[key]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = { top: '', left: '' };\n  private _previousScrollPosition: { top: number, left: number };\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() { }\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement;\n      const body = this._document.body;\n      const previousHtmlScrollBehavior = html.style['scrollBehavior'] || '';\n      const previousBodyScrollBehavior = body.style['scrollBehavior'] || '';\n\n      this._isEnabled = false;\n\n      html.style.left = this._previousHTMLStyles.left;\n      html.style.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      html.style['scrollBehavior'] = body.style['scrollBehavior'] = 'auto';\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      html.style['scrollBehavior'] = previousHtmlScrollBehavior;\n      body.style['scrollBehavior'] = previousBodyScrollBehavior;\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgZone} from '@angular/core';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {Subscription} from 'rxjs';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface CloseScrollStrategyConfig {\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\n  threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n  private _initialScrollPosition: number;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _config?: CloseScrollStrategyConfig) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0);\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  /** Detaches the overlay ref and disables the scroll strategy. */\n  private _detach = () => {\n    this.disable();\n\n    if (this._overlayRef.hasAttached()) {\n      this._ngZone.run(() => this._overlayRef.detach());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig) { }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n      this._ngZone, this._viewportRuler, config)\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {OverlayReference} from './overlay-reference';\n\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalOutlet, OverlayReference {\n  private _backdropElement: HTMLElement | null = null;\n  private _backdropClick: Subject<MouseEvent> = new Subject();\n  private _attachments = new Subject<void>();\n  private _detachments = new Subject<void>();\n  private _keydownEventsObservable: Observable<KeyboardEvent> = Observable.create(observer => {\n    const subscription = this._keydownEvents.subscribe(observer);\n    this._keydownEventSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._keydownEventSubscriptions--;\n    };\n  });\n\n  /** Stream of keydown events dispatched to this overlay. */\n  _keydownEvents = new Subject<KeyboardEvent>();\n\n  /** Amount of subscriptions to the keydown events. */\n  _keydownEventSubscriptions = 0;\n\n  constructor(\n      private _portalOutlet: PortalOutlet,\n      private _host: HTMLElement,\n      private _pane: HTMLElement,\n      private _config: ImmutableObject<OverlayConfig>,\n      private _ngZone: NgZone,\n      private _keyboardDispatcher: OverlayKeyboardDispatcher,\n      private _document: Document) {\n\n    if (_config.scrollStrategy) {\n      _config.scrollStrategy.attach(this);\n    }\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement(): HTMLElement {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement(): HTMLElement | null {\n    return this._backdropElement;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement(): HTMLElement {\n    return this._host;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal: Portal<any>): any {\n    let attachResult = this._portalOutlet.attach(portal);\n\n    if (this._config.positionStrategy) {\n      this._config.positionStrategy.attach(this);\n    }\n\n    // Update the pane element with the given configuration.\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.enable();\n    }\n\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        // The overlay could've been detached before the zone has stabilized.\n        if (this.hasAttached()) {\n          this.updatePosition();\n        }\n      });\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach(): any {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._config.positionStrategy && this._config.positionStrategy.detach) {\n      this._config.positionStrategy.detach();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, false);\n    }\n\n    const detachmentResult = this._portalOutlet.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose(): void {\n    const isAttached = this.hasAttached();\n\n    if (this._config.positionStrategy) {\n      this._config.positionStrategy.dispose();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n\n    this.detachBackdrop();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n      this._host = null!;\n    }\n\n    this._pane = null!;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached(): boolean {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._backdropClick.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._keydownEventsObservable;\n  }\n\n  /** Gets the the current overlay configuration, which is immutable. */\n  getConfig(): OverlayConfig {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition() {\n    if (this._config.positionStrategy) {\n      this._config.positionStrategy.apply();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig: OverlaySizeConfig) {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir: Direction | Directionality) {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n  getDirection(): Direction {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  private _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  private _updateElementSize() {\n    const style = this._pane.style;\n\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  private _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    }\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click',\n        (event: MouseEvent) => this._backdropClick.next(event));\n\n    // Add class to fade-in the backdrop after one frame.\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  private _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode!.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop(): void {\n    let backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let timeoutId: number;\n      let finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n\n        clearTimeout(timeoutId);\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        backdropToDetach!.addEventListener('transitionend', finishDetach);\n      });\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n  }\n\n  /** Toggles a single CSS class or an array of classes on an element. */\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n    const classList = element.classList;\n\n    coerceArray(cssClasses).forEach(cssClass => {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n    });\n  }\n}\n\n\n/** Size properties for an overlay. */\nexport interface OverlaySizeConfig {\n  width?: number | string;\n  height?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {CdkScrollable, ViewportRuler} from '@angular/cdk/scrolling';\nimport {ElementRef} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n} from './connected-position';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {PositionStrategy} from './position-strategy';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayReference} from '../overlay-reference';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @deletion-target 7.0.0\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\n  /**\n   * Reference to the underlying position strategy to which all the API calls are proxied.\n   * @docs-private\n   */\n  _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  private _direction: Direction | null;\n\n  /** Whether the we're dealing with an RTL context */\n  get _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** Emits an event when the connection point changes. */\n  get onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._positionStrategy.positionChanges;\n  }\n\n  constructor(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      connectedTo: ElementRef,\n      viewportRuler: ViewportRuler,\n      document: Document,\n      // @deletion-target 7.0.0 `platform` parameter to be made required.\n      platform?: Platform) {\n\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n    this._positionStrategy =\n      new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n        .withFlexibleDimensions(false)\n        .withPush(false)\n        .withViewportMargin(0);\n\n    this.withFallbackPosition(originPos, overlayPos);\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  /** Attach this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    this._overlayRef = overlayRef;\n    this._positionStrategy.attach(overlayRef);\n\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n\n  /** Disposes all resources used by the position strategy. */\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n\n  /** @docs-private */\n  detach() {\n    this._positionStrategy.detach();\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * @docs-private\n   */\n  apply(): void {\n    this._positionStrategy.apply();\n  }\n\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  recalculateLastPosition(): void {\n    this._positionStrategy.reapplyLastPosition();\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n\n  /**\n   * Adds a new preferred fallback position.\n   * @param originPos\n   * @param overlayPos\n   */\n  withFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      offsetX?: number,\n      offsetY?: number): this {\n\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n    this._preferredPositions.push(position);\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @param dir New layout direction.\n   */\n  withDirection(dir: 'ltr' | 'rtl'): this {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (this._overlayRef) {\n      this._overlayRef.setDirection(dir);\n    } else {\n      this._direction = dir;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @param offset New offset in the X axis.\n   */\n  withOffsetX(offset: number): this {\n    this._positionStrategy.withDefaultOffsetX(offset);\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @param  offset New offset in the Y axis.\n   */\n  withOffsetY(offset: number): this {\n    this._positionStrategy.withDefaultOffsetY(offset);\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked: boolean): this {\n    this._positionStrategy.withLockedPosition(isLocked);\n    return this;\n  }\n\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @param positions Position pairs to be set on the strategy.\n   */\n  withPositions(positions: ConnectionPositionPair[]): this {\n    this._preferredPositions = positions.slice();\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef): this {\n    this._positionStrategy.setOrigin(origin);\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {OverlayReference} from '../overlay-reference';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n  private _cssPosition: string = 'static';\n  private _topOffset: string = '';\n  private _bottomOffset: string = '';\n  private _leftOffset: string = '';\n  private _rightOffset: string = '';\n  private _alignItems: string = '';\n  private _justifyContent: string = '';\n  private _width: string = '';\n  private _height: string = '';\n\n  attach(overlayRef: OverlayReference): void {\n    const config = overlayRef.getConfig();\n\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n\n    overlayRef.hostElement.classList.add('cdk-global-overlay-wrapper');\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value: string = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value: string = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value: string = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value: string = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @deletion-target 7.0.0\n   */\n  width(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @deletion-target 7.0.0\n   */\n  height(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset: string = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset: string = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply(): void {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n    styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n\n    if (config.width === '100%') {\n      parentStyles.justifyContent = 'flex-start';\n    } else if (this._justifyContent === 'center') {\n        parentStyles.justifyContent = 'center';\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n      // don't want that because our positioning is explicitly `left` and `right`, hence\n      // why we do another inversion to ensure that the overlay stays in the same position.\n      // TODO: reconsider this if we add `start` and `end` methods.\n      if (this._justifyContent === 'flex-start') {\n        parentStyles.justifyContent = 'flex-end';\n      } else if (this._justifyContent === 'flex-end') {\n        parentStyles.justifyContent = 'flex-start';\n      }\n    } else {\n      parentStyles.justifyContent = this._justifyContent;\n    }\n\n    parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Noop implemented as a part of the PositionStrategy interface.\n   * @docs-private\n   */\n  dispose(): void { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {ElementRef, Inject, Injectable, Optional} from '@angular/core';\nimport {OriginConnectionPosition, OverlayConnectionPosition} from './connected-position';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    @Inject(DOCUMENT) private _document: any,\n    // @deletion-target 7.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    @Optional() private _platform?: Platform,\n    @Optional() private _overlayContainer?: OverlayContainer) { }\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a relative position strategy.\n   * @param elementRef\n   * @param originPos\n   * @param overlayPos\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * @deletion-target 7.0.0\n   */\n  connectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n\n    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler,\n        this._document);\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param elementRef\n   */\n  flexibleConnectedTo(elementRef: ElementRef | HTMLElement): FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document,\n        this._platform, this._overlayContainer);\n  }\n\n}\n"],"names":["Overlay","prototype","position","this","_positionBuilder","_createPaneElement","host","pane","_document","createElement","id","nextUniqueId","classList","add","appendChild","_createHostElement","_overlayContainer","getContainerElement","_createPortalOutlet","_appRef","_injector","get","ApplicationRef","DomPortalOutlet","_componentFactoryResolver","type","Injectable","ScrollStrategyOptions","OverlayContainer","ComponentFactoryResolver","OverlayPositionBuilder","OverlayKeyboardDispatcher","Injector","NgZone","undefined","decorators","Inject","args","DOCUMENT","Directionality","defaultPositionList","originX","originY","overlayX","overlayY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","elementRef","Directive","selector","exportAs","ElementRef","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","_scrollStrategy","_dir","_hasBackdrop","_lockPosition","_growAfterOpen","_flexibleDimensions","_push","_backdropSubscription","Subscription","EMPTY","viewportMargin","scrollStrategy","open","backdropClick","EventEmitter","positionChange","attach","detach","overlayKeydown","_templatePortal","TemplatePortal","Object","defineProperty","_offsetX","offsetX","_position","_setPositions","_offsetY","offsetY","value","coerceBooleanProperty","_overlayRef","ngOnDestroy","_destroyOverlay","ngOnChanges","changes","withPositions","positions","withLockedPosition","lockPosition","setOrigin","origin","apply","_attachOverlay","_detachOverlay","_createOverlay","length","create","_buildConfig","positionStrategy","_createPositionStrategy","overlayConfig","OverlayConfig","direction","hasBackdrop","width","height","minWidth","minHeight","backdropClass","strategy","flexibleConnectedTo","withFlexibleDimensions","flexibleDiemsions","withPush","push","withGrowAfterOpen","growAfterOpen","withViewportMargin","positionChanges","subscribe","p","_this","emit","map","pos","updateSize","keydownEvents","event","next","keyCode","ESCAPE","hasAttached","unsubscribe","dispose","TemplateRef","ViewContainerRef","Optional","Input","Output","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","NgModule","imports","BidiModule","PortalModule","ScrollDispatchModule","exports","declarations","providers","OverlayModule","OVERLAY_PROVIDERS","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","VIEWPORT_RULER_PROVIDER","OVERLAY_CONTAINER_PROVIDER","FullscreenOverlayContainer","_super","call","tslib_1.__extends","_fullScreenEventName","_fullScreenListener","removeEventListener","_createContainer","_adjustParentForFullscreenChange","_addFullscreenChangeListener","_containerElement","getFullscreenElement","body","fn","eventName","_getEventName","addEventListener","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","__extends","d","b","__","constructor","extendStatics","validateVerticalPosition","property","Error","validateHorizontalPosition","getMatScrollStrategyAlreadyAttachedError","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","top","outsideBelow","outsideLeft","right","left","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","extendStyles","dest","source","key","hasOwnProperty","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","__assign","assign","t","s","i","n","arguments","NoopScrollStrategy","enable","disable","config","panelClass","keys","filter","forEach","ConnectionPositionPair","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","_isEnabled","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","html","previousHtmlScrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","scrollWidth","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","Math","abs","updatePosition","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","_a","noop","close","block","providedIn","ScrollDispatcher","ViewportRuler","_attachedOverlays","_keydownListener","overlays","_keydownEventSubscriptions","_keydownEvents","_isAttached","index","indexOf","splice","SkipSelf","parentNode","removeChild","container","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_keydownEventsObservable","Observable","observer","subscription","portal","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","isAttached","complete","attachments","detachments","getConfig","sizeConfig","tslib_1.__assign","setDirection","dir","getDirection","setAttribute","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId_1","finishDetach_1","clearTimeout","setTimeout","cssClasses","isAdd","coerceArray","cssClass","FlexibleConnectedPositionStrategy","connectedTo","_platform","_isInitialRender","_lastBoundingBoxSize","_isPushed","_canPush","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_positionChangeSubscriptions","_validatePositions","hostElement","_boundingBox","change","_isDisposed","isBrowser","_lastPosition","reapplyLastPosition","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_origin","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_i","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","_b","flexibleFits_1","fit_1","score","weight","lastPosition","withScrollableContainers","margin","flexibleDimensions","canPush","isLocked","nativeElement","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","fit","availableHeight","availableWidth","verticalFit","horizontalFit","_pushOverlayOnScreen","start","pushX","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_getScrollVisibility","changeEvent","xOrigin","elements","querySelectorAll","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","alignItems","justifyContent","_getExactOverlayY","_getExactOverlayX","transformString","transform","trim","virtualKeyboardOffset","documentHeight","clientHeight","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","_positionStrategy","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","marginLeft","marginTop","marginBottom","marginRight","global","Platform","_directionality","portalOutlet"],"mappings":"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"}